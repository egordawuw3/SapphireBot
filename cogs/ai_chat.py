import disnake
from disnake.ext import commands
import google.generativeai as genai
from datetime import datetime
import os
import logging
from typing import Dict, Optional

logger = logging.getLogger("sapphire_bot.ai_chat")

class UserSession:
    def __init__(self, channel_id: int):
        self.channel_id = channel_id
        self.last_interaction = datetime.now()
        self.message_count = 0
        self.history = []

class AiChat(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self._setup_gemini()
        self.user_sessions: Dict[int, UserSession] = {}
        
    def _setup_gemini(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Gemini"""
        try:
            api_key = os.getenv('GEMINI_API_KEY')
            if not api_key:
                logger.error("API –∫–ª—é—á Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                raise ValueError("API –∫–ª—é—á Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            genai.configure(api_key=api_key)
            
            self.model = genai.GenerativeModel(
                model_name="gemini-1.5-flash",
                generation_config={
                    "temperature": 0.7,
                    "top_p": 0.8,
                    "top_k": 40,
                    "max_output_tokens": 2048,
                },
                safety_settings=[
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                ]
            )
            logger.info("–ú–æ–¥–µ–ª—å gemini-1.5-flash —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ Gemini: {e}")
            self.model = None

    @commands.slash_command(
        name="ai",
        description="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ò–ò"
    )
    async def ai_chat(self, inter: disnake.ApplicationCommandInteraction):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            for session in self.user_sessions.values():
                if session.channel_id == inter.channel.id:
                    await inter.response.send_message(
                        "–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –ò–ò!",
                        ephemeral=True
                    )
                    return
                    
            thread_name = f"ai-chat-{inter.author.name.lower()}"
            new_thread = await inter.channel.create_thread(
                name=thread_name,
                type=disnake.ChannelType.private_thread,
                reason=f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π AI —á–∞—Ç –¥–ª—è {inter.author.display_name}",
                invitable=False
            )
            
            await new_thread.add_user(inter.author)
            self.user_sessions[inter.author.id] = UserSession(new_thread.id)
            
            embed = disnake.Embed(
                title="‚ú® –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ò–ò —Å–æ–∑–¥–∞–Ω",
                description=f"–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≤–µ—Ç–∫–∞: {new_thread.mention}\n"
                          f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ask` –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò",
                color=0x2ecc71
            )
            await inter.response.send_message(embed=embed, ephemeral=True)
            
            welcome_embed = disnake.Embed(
                title="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç!",
                description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ask` –¥–ª—è –æ–±—â–µ–Ω–∏—è.",
                color=0x3498db
            )
            await new_thread.send(embed=welcome_embed)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç —Å –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inter.author.id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ —Å –ò–ò: {e}")
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: {str(e)}",
                color=0xff0000
            )
            await inter.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(
        name="ask",
        description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"
    )
    async def ask(
        self,
        inter: disnake.ApplicationCommandInteraction,
        question: str = commands.Param(description="–í–∞—à –≤–æ–ø—Ä–æ—Å")
    ):
        if not isinstance(inter.channel, disnake.Thread) or not inter.channel.name.startswith("ai-chat-"):
            return await inter.response.send_message(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –ò–ò!", 
                ephemeral=True
            )
            
        try:
            await inter.response.defer()
            
            if self.model is None:
                await inter.followup.send("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)
                return
                
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_session = None
            for user_id, session in self.user_sessions.items():
                if session.channel_id == inter.channel.id:
                    user_session = session
                    break
                    
            if not user_session:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                user_session = UserSession(inter.channel.id)
                self.user_sessions[inter.author.id] = user_session
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            user_session.last_interaction = datetime.now()
            user_session.message_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
            user_session.history.append({"role": "user", "parts": [question]})
                
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                chat = self.model.start_chat(history=user_session.history)
                response = await self.bot.loop.run_in_executor(
                    None,
                    lambda: chat.send_message(question).text
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                user_session.history.append({"role": "model", "parts": [response]})
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(user_session.history) > 20:
                    user_session.history = user_session.history[-20:]
                    
                await inter.followup.send(response)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inter.author.id}")
                
            except Exception as e:
                if "safety" in str(e).lower():
                    await inter.followup.send("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", ephemeral=True)
                    logger.warning(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inter.author.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {question}")
                else:
                    await inter.followup.send(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}", ephemeral=True)
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inter.author.id}: {e}")
                
        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ask: {e}")
            await inter.followup.send(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

def setup(bot):
    bot.add_cog(AiChat(bot))