import disnake
from disnake.ext import commands
from utils.embed_utils import make_embed
from utils.economy_service import EconomyService
from utils.permissions import require_staff
from config.constants import SUCCESS_COLOR, ERROR_COLOR, INFO_COLOR, EMOJI_GOLD, EMOJI_SILVER, EMOJI_BRONZE, EMBED_COLOR, WARNING_COLOR

class Economy(commands.Cog):
    """–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã SapphireBot."""
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name="bal",
        description="–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    async def bal(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π."""
        member = member or inter.author
        balance = EconomyService.get_balance(str(member.id))
        embed = make_embed(
            title=f"–ö–æ—à–µ–ª—ë–∫ {member.display_name}",
            description=f"–í–∞—à –±–∞–ª–∞–Ω—Å: **{balance} üíé**",
            color=INFO_COLOR,
            thumbnail=member.display_avatar.url
        )
        await inter.response.send_message(embed=embed)

    @commands.slash_command(
        name="add",
        description="–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã —é–∑–µ—Ä—É (–º–æ–¥, —Ä–∞–∑ –≤ 24—á)"
    )
    @require_staff()
    async def add(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member, amount: int = commands.Param(ge=1), reason: str = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ staff)."""
        new_balance = EconomyService.add_balance(str(member.id), amount)
        embed = make_embed(
            title="–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n–°—É–º–º–∞: +{amount} üíé\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} üíé\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {inter.author.mention}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            color=SUCCESS_COLOR
        )
        await inter.response.send_message(embed=embed)

    @commands.slash_command(
        name="remove",
        description="–ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É —é–∑–µ—Ä–∞ (–º–æ–¥)"
    )
    @require_staff()
    async def remove(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member, amount: int = commands.Param(ge=1), reason: str = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–ó–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ staff)."""
        new_balance = EconomyService.remove_balance(str(member.id), amount)
        embed = make_embed(
            title="–ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n–°—É–º–º–∞: -{amount} üíé\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} üíé\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {inter.author.mention}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            color=INFO_COLOR
        )
        await inter.response.send_message(embed=embed)

    @commands.slash_command(
        name="reset",
        description="–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ (–º–æ–¥)"
    )
    @require_staff()
    async def reset(self, inter: disnake.ApplicationCommandInteraction, member: disnake.Member, reason: str = "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"):
        """–ê–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ staff)."""
        EconomyService.reset_balance(str(member.id))
        embed = make_embed(
            title="–ë–∞–ª–∞–Ω—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {member.mention}\n–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0 üíé\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {inter.author.mention}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            color=WARNING_COLOR
        )
        await inter.response.send_message(embed=embed)

    @commands.slash_command(name="scoreboard", description="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º")
    async def scoreboard(self, inter: disnake.ApplicationCommandInteraction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É."""
        from utils.economy_service import get_top_balances
        top = await get_top_balances(10)
        if not top:
            await inter.send(embed=make_embed(
                title="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞",
                description="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –º–æ–Ω–µ—Ç.",
                color=ERROR_COLOR
            ), ephemeral=True)
            return
        medals = [EMOJI_GOLD, EMOJI_SILVER, EMOJI_BRONZE]
        lines = []
        for i, (user_id, balance) in enumerate(top, 1):
            medal = medals[i-1] if i <= 3 else f"`{i}`"
            try:
                user = await self.bot.fetch_user(int(user_id))
                user_mention = user.mention
            except Exception:
                user_mention = f"<@{user_id}>"
            lines.append(f"{medal} {user_mention} ‚Äî **{balance} –º–æ–Ω–µ—Ç**")
        embed = make_embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º",
            description="\n".join(lines),
            color=EMBED_COLOR
        )
        embed.set_footer(text="–¢–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É")
        await inter.send(embed=embed)

def setup(bot):
    bot.add_cog(Economy(bot))