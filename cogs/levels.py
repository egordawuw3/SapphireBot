import json
import math
import disnake
from disnake.ext import commands

class Levels(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.users_data = {}
        self.xp_per_message = 15
        self.base_xp = 100
        self.max_level = 50
        self.load_data()

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open('levels_data.json', 'r') as f:
                self.users_data = json.load(f)
        except FileNotFoundError:
            self.users_data = {}
            self.save_data()

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON —Ñ–∞–π–ª"""
        with open('levels_data.json', 'w') as f:
            json.dump(self.users_data, f, indent=4)

    async def update_roles(self, member, level):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        role_levels = {
            1: 1364889084098510868,
            5: 1364889174280372274,
            10: 1364889171222855760,
            15: 1364889168592769104,
            25: 1364889165333925968,
            35: 1364889161886204054,
            45: 1364889851949879339,
            50: 1364889574639407116
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            roles_to_add = []
            for req_level, role_id in role_levels.items():
                if level >= req_level:
                    role = member.guild.get_role(role_id)
                    if role and role not in member.roles:
                        roles_to_add.append(role)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if roles_to_add:
                await member.add_roles(*roles_to_add)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ä–æ–ª—è—Ö –≤ –∫–∞–Ω–∞–ª spam
                spam_channel = None
                for channel in member.guild.channels:
                    if channel.name.lower() == 'spam':
                        spam_channel = channel
                        break
                
                if spam_channel:
                    role_names = [role.name for role in roles_to_add]
                    embed = disnake.Embed(
                        title="üé≠ –ù–æ–≤—ã–µ —Ä–æ–ª–∏!",
                        description=f"üéâ {member.mention} –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {level} —É—Ä–æ–≤–Ω—è:\n" + 
                                  "\n".join([f"‚Ä¢ {role}" for role in role_names]),
                        color=self.get_level_color(level)
                    )
                    await spam_channel.send(embed=embed)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª —Å–ø–∞–º-–∫–∞–Ω–∞–ª–æ–º
        if message.channel.name.lower().find('spam') != -1:
            return
            
        user_id = str(message.author.id)
        if user_id not in self.users_data:
            self.users_data[user_id] = {"xp": 0, "level": 0}
            
        old_level = self.users_data[user_id]["level"]
        self.users_data[user_id]["xp"] += self.xp_per_message
        new_level = self.calculate_level(self.users_data[user_id]["xp"])
        self.users_data[user_id]["level"] = new_level
        
        if new_level > old_level:
            # –ò—â–µ–º –∫–∞–Ω–∞–ª spam
            spam_channel = None
            for channel in message.guild.channels:
                if channel.name.lower() == 'spam':
                    spam_channel = channel
                    break
            
            if spam_channel:
                embed = disnake.Embed(
                    title=f"{self.get_level_emoji(new_level)} –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
                    description=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {message.author.mention}!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **{new_level}** —É—Ä–æ–≤–Ω—è!",
                    color=self.get_level_color(new_level)
                )
                embed.set_thumbnail(url=message.author.display_avatar.url)
                await spam_channel.send(embed=embed)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_roles(message.author, new_level)
            
        self.save_data()

    @commands.slash_command(
        name="rank",
        description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç"
    )
    async def rank(self, inter: disnake.ApplicationCommandInteraction):
        user_id = str(inter.author.id)
        if user_id not in self.users_data:
            await inter.response.send_message(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–≤–Ω—è. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!",
                ephemeral=True
            )
            return
            
        user_data = self.users_data[user_id]
        current_xp = user_data["xp"]
        current_level = user_data["level"]
        xp_for_next = self.calculate_xp_for_next_level(current_level)
        
        embed = disnake.Embed(
            title=f"{self.get_level_emoji(current_level)} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {inter.author.display_name}",
            color=self.get_level_color(current_level)
        )
        
        if current_level < self.max_level:
            progress = f"{current_xp}/{xp_for_next}"
            remaining = f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {xp_for_next - current_xp} XP"
        else:
            progress = f"{current_xp}"
            remaining = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! üéä"
            
        embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=str(current_level), inline=True)
        embed.add_field(name="–û–ø—ã—Ç", value=progress, inline=True)
        embed.add_field(name="–ü—Ä–æ–≥—Ä–µ—Å—Å", value=remaining, inline=False)
        embed.set_thumbnail(url=inter.author.display_avatar.url)
        
        await inter.response.send_message(embed=embed)

    @commands.slash_command(
        name="leaderboard",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    )
    async def leaderboard(self, inter: disnake.ApplicationCommandInteraction):
        sorted_users = sorted(
            self.users_data.items(),
            key=lambda x: (x[1]["level"], x[1]["xp"]),
            reverse=True
        )[:10]
        
        embed = disnake.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            color=0xFFD700
        )
        
        for index, (user_id, data) in enumerate(sorted_users, 1):
            user = await self.bot.get_or_fetch_user(int(user_id))
            if user:
                medal = "üëë" if index == 1 else "ü•à" if index == 2 else "ü•â" if index == 3 else "‚ú®"
                embed.add_field(
                    name=f"{medal} #{index} {user.name}",
                    value=f"–£—Ä–æ–≤–µ–Ω—å: {data['level']} | XP: {data['xp']}",
                    inline=False
                )
        
        await inter.response.send_message(embed=embed)

    def calculate_level(self, xp):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ XP"""
        if xp < self.base_xp:
            return 0
        return min(int(math.log(xp / self.base_xp, 1.5) + 1), self.max_level)

    def calculate_xp_for_next_level(self, current_level):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if current_level >= self.max_level:
            return float('inf')
        return int(self.base_xp * (1.5 ** (current_level)))

    def get_level_emoji(self, level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        if level >= 40:
            return "üåü"
        elif level >= 30:
            return "üíé"
        elif level >= 20:
            return "üîÆ"
        elif level >= 10:
            return "‚≠ê"
        else:
            return "‚ú®"
            
    def get_level_color(self, level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        if level >= 40:
            return 0xFF0000  # –ö—Ä–∞—Å–Ω—ã–π
        elif level >= 30:
            return 0xFFA500  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif level >= 20:
            return 0xFFFF00  # –ñ–µ–ª—Ç—ã–π
        elif level >= 10:
            return 0x00FF00  # –ó–µ–ª–µ–Ω—ã–π
        else:
            return 0x0000FF  # –°–∏–Ω–∏–π

def setup(bot):
    bot.add_cog(Levels(bot))