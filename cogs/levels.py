import disnake
from disnake.ext import commands
import math
import logging
from datetime import datetime, timedelta
from utils.database import Database
from utils.embed_builder import EmbedBuilder
from config.constants import ROLE_LEVELS, LEVEL_COLORS, LEVEL_EMOJIS, XP_PER_MESSAGE, BASE_XP, MAX_LEVEL, XP_COOLDOWN

logger = logging.getLogger('sapphire_bot.levels')

class Levels(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.xp_per_message = XP_PER_MESSAGE
        self.base_xp = BASE_XP
        self.max_level = MAX_LEVEL
        self.xp_cooldown = XP_COOLDOWN
        self.user_cooldowns = {}

    async def update_roles(self, member, level):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            max_applicable_level = max(
                (req_level for req_level in ROLE_LEVELS if level >= req_level),
                default=None
            )
            
            if max_applicable_level is None:
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Ä–æ–ª—å
            target_role_id = ROLE_LEVELS[max_applicable_level]
            target_role = member.guild.get_role(target_role_id)
            
            if not target_role:
                logger.error(f"–†–æ–ª—å –¥–ª—è —É—Ä–æ–≤–Ω—è {max_applicable_level} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π
            level_roles = [
                member.guild.get_role(role_id) 
                for role_id in ROLE_LEVELS.values()
                if member.guild.get_role(role_id)
            ]

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ä–æ–ª–∏ –∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤–æ–π
            roles_to_remove = [r for r in member.roles if r in level_roles and r != target_role]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ä–æ–ª—å –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if target_role not in member.roles:
                await member.add_roles(target_role)
                
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_roles = member.roles
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            roles_to_add = [r for r in required_roles if r not in current_roles]
            roles_to_remove = [r for r in current_roles if r.id in ROLE_LEVELS.values() and r not in required_roles]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if roles_to_add:
                await member.add_roles(*roles_to_add)
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove)
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ä–æ–ª—è—Ö –≤ –∫–∞–Ω–∞–ª spam
            spam_channel = None
            for channel in member.guild.channels:
                if channel.name.lower() == 'spam':
                    spam_channel = channel
                    break
            
            if spam_channel and (roles_to_add or roles_to_remove):
                role_changes = []
                if roles_to_add:
                    role_names = [role.name for role in roles_to_add]
                    role_changes.append(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(role_names)}")
                if roles_to_remove:
                    role_names = [role.name for role in roles_to_remove]
                    role_changes.append(f"‚ûñ –£–¥–∞–ª–µ–Ω—ã: {', '.join(role_names)}")
                
                embed = EmbedBuilder.success(
                    title="üé≠ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π!",
                    description=f"üéâ {member.mention} –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {level} —É—Ä–æ–≤–Ω—è:\n" + 
                              "\n".join(role_changes)
                )
                await spam_channel.send(embed=embed)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")

    @commands.Cog.listener()
    async def on_message(self, message):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.author.bot:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª —Å–ø–∞–º-–∫–∞–Ω–∞–ª–æ–º
        if message.channel.name.lower().find('spam') != -1:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        user_id = str(message.author.id)
        current_time = datetime.now()
        
        if user_id in self.user_cooldowns:
            time_diff = (current_time - self.user_cooldowns[user_id]).total_seconds()
            if time_diff < self.xp_cooldown:  # 0 —Å–µ–∫—É–Ω–¥ - —É—Å–ª–æ–≤–∏–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.user_cooldowns[user_id] = current_time
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user_data(user_id)
            
        old_level = user_data["level"]
        user_data["xp"] += self.xp_per_message
        new_level = self.calculate_level(user_data["xp"])
        user_data["level"] = new_level
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.db.update_user_data(user_id, user_data["xp"], user_data["level"])
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
        if new_level > old_level:
            # –ò—â–µ–º –∫–∞–Ω–∞–ª spam
            spam_channel = None
            for channel in message.guild.channels:
                if channel.name.lower() == 'spam':
                    spam_channel = channel
                    break
            
            if spam_channel:
                embed = EmbedBuilder.level_up(
                    user=message.author,
                    level=new_level,
                    emoji=self.get_level_emoji(new_level)
                )
                await spam_channel.send(embed=embed)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.update_roles(message.author, new_level)

    @commands.slash_command(
        name="rank",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    )
    async def rank(
        self, 
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member = commands.Param(
            default=None,
            description="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–≤–æ–µ–≥–æ —Ä–∞–Ω–≥–∞)"
        )
    ):
        target = member or inter.author
        user_id = str(target.id)
        user_data = self.db.get_user_data(user_id)
        
        current_xp = user_data["xp"]
        current_level = user_data["level"]
        xp_for_next = self.calculate_xp_for_next_level(current_level)
        
        embed = EmbedBuilder.rank(
            user=target,
            level=current_level,
            xp=current_xp,
            next_level_xp=xp_for_next,
            color=self.get_level_color(current_level),  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–≤–µ—Ç–∞
            emoji=self.get_level_emoji(current_level)
        )
        
        await inter.response.send_message(embed=embed)

    @commands.slash_command(
        name="leaderboard",
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"
    )
    async def leaderboard(self, inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = self.db.get_top_users(10)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_objects = {}
        for user_data in top_users:
            try:
                user_id = int(user_data["user_id"])
                user = await self.bot.get_or_fetch_user(user_id)
                if user:
                    user_objects[user_data["user_id"]] = user
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        embed = EmbedBuilder.leaderboard(top_users, user_objects)
        
        await inter.followup.send(embed=embed)

    @commands.slash_command(
        name="set_level",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–º –∏ –æ–ø—ã—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    @commands.has_role(1207281299849744385)
    async def set_level(
        self,
        inter: disnake.ApplicationCommandInteraction,
        member: disnake.Member,
        action: str = commands.Param(choices=["set", "add", "subtract"]),
        level: int = commands.Param(default=None, ge=0, le=MAX_LEVEL),
        xp: int = commands.Param(default=None, ge=0)
    ):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–∏–±–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–º –∏ –æ–ø—ã—Ç–æ–º"""
        await inter.response.defer(ephemeral=True)
        try:
            if not (level or xp):
                raise commands.BadArgument("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å level –∏–ª–∏ xp")

            user_data = self.db.get_user_data(str(member.id))
            current_level = user_data["level"]
            current_xp = user_data["xp"]

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
            if level is not None:
                if action == "set":
                    new_level = level
                elif action == "add":
                    new_level = current_level + level
                else: # subtract
                    new_level = max(0, current_level - level)
                
                new_level = min(new_level, MAX_LEVEL)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—ã—Ç
            if xp is not None:
                if action == "set":
                    new_xp = xp
                elif action == "add":
                    new_xp = current_xp + xp
                else: # subtract
                    new_xp = max(0, current_xp - xp)
                
                # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ XP
                new_level = self.calculate_level(new_xp)
            else:
                new_xp = current_xp

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.db.update_user_data(str(member.id), new_xp, new_level)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏
            await self.update_roles(member, new_level)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            changes = []
            if level is not None:
                changes.append(f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {current_level} ‚Üí {new_level}")
            if xp is not None:
                changes.append(f"‚Ä¢ –û–ø—ã—Ç: {current_xp} ‚Üí {new_xp}")
            
            embed = EmbedBuilder.success(
                title="‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention}:\n" + "\n".join(changes)
            )
            await inter.edit_original_response(embed=embed)
            
        except Exception as e:
            embed = EmbedBuilder.error(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            await inter.followup.send(embed=embed, ephemeral=True)

    def calculate_level(self, xp):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ XP"""
        if xp < self.base_xp:
            return 0
        return min(int(math.log(xp / self.base_xp, 1.5) + 1), self.max_level)

    def calculate_xp_for_next_level(self, current_level):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if current_level >= self.max_level:
            return float('inf')
        return int(self.base_xp * (1.5 ** (current_level)))

    def get_level_emoji(self, level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        for min_level, emoji in sorted(LEVEL_EMOJIS.items(), reverse=True):
            if level >= min_level:
                return emoji
        return "‚ú®"
            
    def get_level_color(self, level):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
        for min_level, color in sorted(LEVEL_COLORS.items(), reverse=True):
            if level >= min_level:
                return color
        return 0x0000FF

def setup(bot):
    bot.add_cog(Levels(bot))