import disnake
from disnake.ext import commands
from disnake import ButtonStyle, TextInputStyle
import asyncio

class StoreModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
                placeholder="–ú–æ–Ω—Ç–∞–∂, –¥–∏–∑–∞–π–Ω –∏ —Ç.–ø.",
                custom_id="service_name",
                style=TextInputStyle.short,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å",
                custom_id="service_description",
                style=TextInputStyle.paragraph
            )
        ]
        super().__init__(
            title="–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏",
            custom_id="store_modal",
            components=components
        )

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            await inter.response.defer(ephemeral=True)

            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–∞
            overwrites = {
                inter.guild.default_role: disnake.PermissionOverwrite(read_messages=False),
                inter.user: disnake.PermissionOverwrite(read_messages=True, send_messages=True),
                inter.guild.me: disnake.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ Staff
            staff_role = disnake.utils.get(inter.guild.roles, name="Staff")
            if staff_role:
                overwrites[staff_role] = disnake.PermissionOverwrite(read_messages=True, send_messages=True)

            category = disnake.utils.get(inter.guild.categories, name="‚Äî √ó store")
            if not category:
                category = await inter.guild.create_category(
                    "‚Äî √ó store",
                    overwrites=overwrites
                )

            channel = await inter.guild.create_text_channel(
                name=f"order-{inter.user.name}",
                category=category,
                overwrites=overwrites,
                topic=f"–ó–∞–∫–∞–∑—á–∏–∫: {inter.user.id}"
            )

            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞
            embed = disnake.Embed(
                title="üíé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                description="–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                color=disnake.Color.blue()
            )
            embed.add_field(name="–ó–∞–∫–∞–∑—á–∏–∫", value=inter.user.mention, inline=True)
            embed.add_field(name="–£—Å–ª—É–≥–∞", value=inter.text_values["service_name"], inline=True)
            embed.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ", value=inter.text_values["service_description"], inline=False)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            view = StoreControls()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∑–∞–∫–∞–∑–∞
            await channel.send(embed=embed, view=view)

            await inter.followup.send(
                f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}",
                ephemeral=True
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await inter.followup.send(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )

class StoreControls(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=ButtonStyle.red, emoji="üîí", custom_id="close_order")
    async def close_order(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        try:
            staff_role = disnake.utils.get(inter.guild.roles, name="Staff")
            creator_id = int(inter.channel.topic.split(": ")[1]) if inter.channel.topic else None
            
            if not (inter.user.id == creator_id or (staff_role and staff_role in inter.user.roles)):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", ephemeral=True)
                return

            await inter.response.defer(ephemeral=True)
            await inter.followup.send("–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", ephemeral=True)
            await asyncio.sleep(5)
            await inter.channel.delete()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await inter.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑.", ephemeral=True)

class Store(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        asyncio.ensure_future(self.setup_store_message())

    async def setup_store_message(self):
        await self.bot.wait_until_ready()

        guild_id = 832291503581167636
        guild = self.bot.get_guild(guild_id)
        if not guild:
            print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Å ID {guild_id}")
            return

        # –¢–æ–ª—å–∫–æ store channel
        store_channel = disnake.utils.get(guild.text_channels, name="üì¶„Éªstore")
        
        if store_channel:
            try:
                # –£–¥–∞–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                async for message in store_channel.history(limit=None):
                    if message.author == self.bot.user:
                        await message.delete()
                        await asyncio.sleep(0.5)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ store-–∫–∞–Ω–∞–ª–∞: {e}")

            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = disnake.Embed(
                title="üíé –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É",
                description=(
                    "> <:Sapphire__icon:1159785635628994601> –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ó–ê–ö–ê–ó–ê–¢–¨.\n\n"
                    "> <:Sapphire_icon:1159787682734542869> –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° @w1nchester0111."
                ),
                color=disnake.Color.blue()
            )
            embed.set_image(url="https://cdn.discordapp.com/attachments/1079626559423512679/1098117546328195072/whiteline.gif?ex=6809cba9&is=68087a29&hm=f558c4ed18566a404275a62081737ba50c9342a73fe5169f812f1512e00c412f&")

            view = disnake.ui.View(timeout=None)
            view.add_item(disnake.ui.Button(
                style=ButtonStyle.danger,
                label="‚ö°–ó–ê–ö–ê–ó–ê–¢–¨",
                custom_id="create_order"
            ))

            try:
                await store_channel.send(embed=embed, view=view)
                print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ store-–∫–∞–Ω–∞–ª")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id == "create_order":
            await inter.response.send_modal(StoreModal())

def setup(bot):
    bot.add_cog(Store(bot))