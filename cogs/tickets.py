import disnake
from disnake.ext import commands
import asyncio
import logging
from utils.embed_utils import make_embed
from config.constants import STAFF_ROLE_ID, INFO_COLOR, ERROR_COLOR, SUCCESS_COLOR

logger = logging.getLogger(__name__)

class TicketModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞",
                custom_id="ticket_title",
                style=disnake.TextInputStyle.short,
                max_length=100
            ),
            disnake.ui.TextInput(
                label="–û–ø–∏—Å–∞–Ω–∏–µ",
                custom_id="ticket_description",
                style=disnake.TextInputStyle.paragraph
            )
        ]
        super().__init__(
            title="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
            custom_id="ticket_modal",
            components=components
        )

    async def callback(self, inter: disnake.ModalInteraction) -> None:
        try:
            await inter.response.defer(ephemeral=True)
            ticket_number = await self.get_next_ticket_number(inter.guild)
            overwrites = {
                inter.guild.default_role: disnake.PermissionOverwrite(read_messages=False),
                inter.user: disnake.PermissionOverwrite(read_messages=True, send_messages=True),
                inter.guild.me: disnake.PermissionOverwrite(read_messages=True, send_messages=True)
            }
            staff_role = inter.guild.get_role(STAFF_ROLE_ID)
            if staff_role:
                overwrites[staff_role] = disnake.PermissionOverwrite(read_messages=True, send_messages=True)
            category = disnake.utils.get(inter.guild.categories, name="‚Äî √ó tickets")
            if not category:
                category = await inter.guild.create_category(
                    "‚Äî √ó tickets",
                    overwrites=overwrites
                )
            channel = await inter.guild.create_text_channel(
                name=f"ticket-{ticket_number}",
                category=category,
                overwrites=overwrites,
                topic=f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {inter.user.id}"
            )
            fields = [
                {"name": "–°–æ–∑–¥–∞—Ç–µ–ª—å", "value": inter.user.mention, "inline": True},
                {"name": "–¢–µ–º–∞", "value": inter.text_values["ticket_title"], "inline": True},
                {"name": "–û–ø–∏—Å–∞–Ω–∏–µ", "value": inter.text_values["ticket_description"], "inline": False}
            ]
            embed = make_embed(
                title=f"–¢–∏–∫–µ—Ç #{ticket_number}",
                description="üé´ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω",
                color=INFO_COLOR,
                fields=fields
            )
            view = TicketControls()
            await channel.send(embed=embed, view=view)
            await inter.followup.send(f"–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}", ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
            embed = make_embed(
                title="–û—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç: {e}",
                color=ERROR_COLOR
            )
            await inter.followup.send(embed=embed, ephemeral=True)

    async def get_next_ticket_number(self, guild: disnake.Guild) -> int:
        existing = [c for c in guild.text_channels if c.name.startswith("ticket-")]
        numbers = [int(c.name.split("-", 1)[1]) for c in existing if c.name.split("-", 1)[1].isdigit()]
        return max(numbers, default=0) + 1

class TicketControls(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=disnake.ButtonStyle.red, emoji="üîí", custom_id="close_ticket")
    async def close_ticket(self, button: disnake.ui.Button, inter: disnake.MessageInteraction):
        try:
            staff_role = inter.guild.get_role(STAFF_ROLE_ID)
            creator_id = int(inter.channel.topic.split(": ")[1]) if inter.channel.topic else None
            if not (inter.user.id == creator_id or (staff_role and staff_role in inter.user.roles)):
                embed = make_embed(
                    title="–û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.",
                    color=ERROR_COLOR
                )
                await inter.response.send_message(embed=embed, ephemeral=True)
                return
            await inter.response.defer(ephemeral=True)
            await inter.followup.send("–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", ephemeral=True)
            await asyncio.sleep(5)
            await inter.channel.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
            await inter.followup.send("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.", ephemeral=True)

class Tickets(commands.Cog):
    """–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name="setup-tickets",
        description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª."
    )
    @commands.has_permissions(administrator=True)
    async def setup_tickets(self, inter: disnake.ApplicationCommandInteraction) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞."""
        try:
            embed = make_embed(
                title="üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                description=(
                    "<:Sapphire_icon:1159787682734542869> –°–æ–∑–¥–∞–≤ —Ç–∏–∫–µ—Ç, –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ç–∫–∞, –≥–¥–µ —É –≤–∞—Å –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
                    "‚Ä¢ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n"
                    "‚Ä¢ –ó–∞–¥–∞—Ç—å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å –ø–æ —Å–µ—Ä–≤–µ—Ä—É.\n"
                    "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –±–∞–≥–∞—Ö –∏–ª–∏ –Ω–µ–¥–æ—á—ë—Ç–∞—Ö.\n"
                    "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
                    "<:Sapphire_icon:1159787647712120924> –ó–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–∏–∫–µ—Ç –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."
                ),
                color=INFO_COLOR
            )
            view = disnake.ui.View(timeout=None)
            view.add_item(disnake.ui.Button(
                style=disnake.ButtonStyle.danger,
                label="–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç!",
                emoji="üì®",
                custom_id="create_ticket"
            ))
            await inter.channel.send(embed=embed, view=view)
            await inter.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ setup-tickets: {e}")
            await inter.response.send_message(f"–û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id == "create_ticket":
            await inter.response.send_modal(TicketModal())


def setup(bot):
    bot.add_cog(Tickets(bot))
