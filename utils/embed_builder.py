import disnake
from typing import Optional, List, Dict, Any, Union

class EmbedBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö —ç–º–±–µ–¥–æ–≤"""
    
    @staticmethod
    def success(title: str, description: str, **kwargs) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        embed = disnake.Embed(
            title=title,
            description=description,
            color=0x2ecc71,  # –ó–µ–ª–µ–Ω—ã–π
            **kwargs
        )
        return embed
    
    @staticmethod
    def error(title: str, description: str, **kwargs) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ –æ—à–∏–±–∫–∏"""
        embed = disnake.Embed(
            title=title,
            description=description,
            color=0xe74c3c,  # –ö—Ä–∞—Å–Ω—ã–π
            **kwargs
        )
        return embed
    
    @staticmethod
    def info(title: str, description: str, **kwargs) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–º–±–µ–¥"""
        embed = disnake.Embed(
            title=title,
            description=description,
            color=0x3498db,  # –°–∏–Ω–∏–π
            **kwargs
        )
        return embed
    
    @staticmethod
    def warning(title: str, description: str, **kwargs) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —ç–º–±–µ–¥"""
        embed = disnake.Embed(
            title=title,
            description=description,
            color=0xf39c12,  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            **kwargs
        )
        return embed
    
    @staticmethod
    def level_up(user: disnake.Member, level: int, color: int, emoji: str) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        embed = disnake.Embed(
            title=f"{emoji} –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
            description=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user.mention}!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **{level}** —É—Ä–æ–≤–Ω—è!",
            color=color
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        return embed
    
    @staticmethod
    def rank(user: disnake.Member, level: int, xp: int, next_level_xp: Union[int, float], 
             color: int, emoji: str) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        embed = disnake.Embed(
            title=f"{emoji} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.display_name}",
            color=color
        )
        
        if next_level_xp != float('inf'):
            progress = f"{xp}/{next_level_xp}"
            remaining = f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level_xp - xp} XP"
        else:
            progress = f"{xp}"
            remaining = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! üéä"
            
        embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=str(level), inline=True)
        embed.add_field(name="–û–ø—ã—Ç", value=progress, inline=True)
        embed.add_field(name="–ü—Ä–æ–≥—Ä–µ—Å—Å", value=remaining, inline=False)
        embed.set_thumbnail(url=user.display_avatar.url)
        
        return embed
    
    @staticmethod
    def leaderboard(users_data: List[Dict[str, Any]], user_objects: Dict[str, disnake.User]) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
        embed = disnake.Embed(
            title="üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤",
            color=0xFFD700  # –ó–æ–ª–æ—Ç–æ–π
        )
        
        for index, data in enumerate(users_data, 1):
            user_id = data["user_id"]
            user = user_objects.get(user_id)
            
            if user:
                medal = "üëë" if index == 1 else "ü•à" if index == 2 else "ü•â" if index == 3 else "‚ú®"
                embed.add_field(
                    name=f"{medal} #{index} {user.name}",
                    value=f"–£—Ä–æ–≤–µ–Ω—å: {data['level']} | XP: {data['xp']}",
                    inline=False
                )
        
        return embed
    
    @staticmethod
    def now_playing(title: str, url: str, thumbnail: str, requester: disnake.Member, 
                    duration: str) -> disnake.Embed:
        """–°–æ–∑–¥–∞–µ—Ç —ç–º–±–µ–¥ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        embed = disnake.Embed(
            title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            description=f"**{title}**",
            color=0x3498db  # –°–∏–Ω–∏–π
        )
        embed.set_thumbnail(url=thumbnail)
        embed.add_field(name="–ó–∞–ø—Ä–æ—Å–∏–ª", value=requester.mention, inline=True)
        embed.add_field(name="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", value=duration, inline=True)
        embed.add_field(name="–°—Å—ã–ª–∫–∞", value=f"[YouTube]({url})", inline=False)
        
        return embed